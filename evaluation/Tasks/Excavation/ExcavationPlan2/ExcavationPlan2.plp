// The following PLEXIL codes are automatically generated during planning.

#include "plan-interface.h"


ExcavationPlan2:
{
	Boolean TrenchReady=false;
	Boolean GroundDetectionSuccess=false;
	Boolean DiggingSuccess=false;
	String PlanStatus;
	String OpOutcome;
	
	ExitCondition Lookup(TerminatePlan);
	
	Update checkpoint_type="Plan", checkpoint_name="ExcavationPlan2.plx", checkpoint_status=PLAN_STARTED;
	log_info ("[ExcavationPlan2.plx] Start");

	log_info ("{\"sel_xloc\": {\"sci_val\": 0.4629, \"position\": {\"y\": -0.6, \"x\": 1.69}, \"ex_prob\": 0.7946, \"name\": \"xloc3\"}, \"sel_dloc\": {\"position\": {\"y\": 0.8, \"x\": 1.67}, \"name\": \"dloc4\"}, \"task_name\": 1, \"node_name\": \"ExcavationPlan2\"}");

	log_info ("[Unstow] Start");
	LibraryCall Unstow();
	log_info ("[Unstow] Finish");

	GroundDetection: {
		Update checkpoint_type="Operation", checkpoint_name="GroundDetection", checkpoint_status=OP_STARTED;
		log_info ("[GroundDetection Operation] Start: a guarded move to find out the ground postion of the location (x=1.69, y=-0.6)");

		log_info ("Start GuardedMove...");
		LibraryCall GuardedMove (
			X = 1.69, Y = -0.6, Z = 0.05,
			DirX = 0.0, DirY = 0.0, DirZ = 1.0,
			SearchDistance = 0.5);
	}

	if (Lookup(GroundFound) && GroundDetection.outcome == SUCCESS) {
		GroundDetectionSuccess=true;
		OpOutcome=OP_SUCCESS;
		log_info ("Detected ground position: ", Lookup(GroundPosition));
	}
	else {
		OpOutcome=OP_FAILURE;
	}

	Update checkpoint_type="Operation", checkpoint_name="GroundDetection", checkpoint_status=OpOutcome;
	log_info ("[GroundDetection Operation] ", OpOutcome);

	if (GroundDetectionSuccess) {
		Digging: {
			Update checkpoint_type="Operation", checkpoint_name="Digging", checkpoint_status=OP_STARTED;
			log_info ("[Digging Operation] Start: grinding at the location (x=1.69,y=-0.6)");

			log_info ("Start Grind...");
			LibraryCall Grind (
				X = 1.69, Y = -0.6,
				Depth = 0.1, Length = 0.3,
				GroundPos = Lookup(GroundPosition),
				Parallel = true);
		}

		if (Digging.outcome == SUCCESS) {
			DiggingSuccess=true;
			OpOutcome=OP_SUCCESS;
		}
		else {
			OpOutcome=OP_FAILURE;
		}

		Update checkpoint_type="Operation", checkpoint_name="Digging", checkpoint_status=OpOutcome;
		log_info ("[Digging Operation] ", OpOutcome);

		if (DiggingSuccess) {
			TailingRemoval: {
				Update checkpoint_type="Operation", checkpoint_name="TailingRemoval", checkpoint_status=OP_STARTED;
				log_info ("[TailingRemoval Operation] Start: remove from the depth of 0.1 meters in the trench location (x=1.69,y=-0.6) to the dump location (x=1.67,y=0.8,z=1.67)");

				log_info ("Start dig_circular...");
				LibraryCall DigCircular (
					X = 1.69, Y = -0.6, Depth = 0.1,
					GroundPos = Lookup(GroundPosition),
					Parallel = true);
				log_info ("Delivering the sample...");
				LibraryCall Deliver (X = 1.67, Y = 0.8, Z = 0.02);
			}

			if (TailingRemoval.outcome == SUCCESS) {
				TrenchReady=true;
				OpOutcome=OP_SUCCESS;
			}
			else {
				OpOutcome=OP_FAILURE;
			}

			Update checkpoint_type="Operation", checkpoint_name="TailingRemoval", checkpoint_status=OpOutcome;
			log_info ("[TailingRemoval Operation] ", OpOutcome);

		}

	}

	if (TrenchReady) {
		PlanStatus=PLAN_SUCCESS;
	}
	else {
		PlanStatus=PLAN_FAILURE;
	}

	Update checkpoint_type="Plan", checkpoint_name="ExcavationPlan2.plx", checkpoint_status=PlanStatus;
	log_info ("[ExcavationPlan2.plx] Finish");
}
