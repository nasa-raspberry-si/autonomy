// autonomy-excavate
// RASPBERRY-SI Planning model prototype for Ocean Worlds Autonomy Testbed
// Javier Camara, Univerity of York
// javier.camaramoreno@york.ac.uk

mdp


 // Number of excavation locations
 // Number of dump locations

// Parameters
const curLoc=12; // Current location of arm when planner is called (here we have a hardcoded value, but this will be provided to the planner)

// Special Locations
const locOrig=0;
const locNull=11+100; // Only auxiliary constants to define the range of variable loc

// Excavation Locations
const xloc1=1;
const xloc2=2;
const xloc3=3;
const xloc4=4;
const xloc5=5;
const xloc6=6;
const xloc7=7;

// Dump Locations
const dloc1=8;
const dloc2=9;
const dloc3=10;
const dloc4=11;


// Possible states of the mission (to keep track of progress)
const START=0;
const DONE_EXCAVATING=1;
const DONE_DUMPING=2;
const FAILED=100;

formula tried_all_xloc =  tried_xloc1 &  tried_xloc2 &  tried_xloc3 &  tried_xloc4 &  tried_xloc5 &  tried_xloc6 &  tried_xloc7 &  true; // Have we tried all excavation locations?
//const int MAX_TRIED; // Maximum number of excavation attempts (can be 1 by default, number of excavation locations upper bound)

// Module that is in charge of selecting an excavation location
// It tries one location first, and if it does not succeed, it goes to the next one.
// If all locations have been tried and state is still START (unsuccessful excavation), it fails
module autonomy
	s:[START..FAILED] init START; // State of mission
	loc:[locOrig..locNull] init curLoc;
	tried:[0..MAX_TRIED] init 0; // Keeps track of excavation attempts

	
	tried_xloc1: bool init false;
	succ_xloc1: bool init false;
	tried_xloc2: bool init false;
	succ_xloc2: bool init false;
	tried_xloc3: bool init false;
	succ_xloc3: bool init false;
	tried_xloc4: bool init false;
	succ_xloc4: bool init false;
	tried_xloc5: bool init false;
	succ_xloc5: bool init false;
	tried_xloc6: bool init false;
	succ_xloc6: bool init false;
	tried_xloc7: bool init false;
	succ_xloc7: bool init false;

	// Excavation behavior
	// In the following commands, we have:
	// Command 1:
	// * A guard that checks: (1) that we are at the START of the mission
	// 			  (2) that we have not tried to excavate location A
	//			  (3) that the maximum number of excavation attempts has not been reached
	// * An update with probability ex_locA (excavatability of excavation location A) that:
	//			  (1) updates the variable saying that we have tried location A (not needed but left for clarity)
	// 			  (2) updates the variable that keeps track of excavation attempts
	//			  (3) updates the arm location variable to location A
	//            (4) updates the variable for excavation success in the current location to true	
	// * Another update with probability 1-ex_locA that:
	//			  (1) updates the variable saying that we have tried location A
	//			  (2) updates the arm location variable to location A (even if we have not succeeded excavating)
	// 			  (3) updates the variable that keeps track of excavation attempts
	// Command 2:
	// * A guard that checks: (1) that there is success in the current excavation location
	// * An update that: (1) sets the excavation success back to false
   	//			         (2) updates the state to successful excavation (DONE_EXCAVATING)

	
	[try_xloc1] (s=START) & (!tried_xloc1) & (tried<MAX_TRIED) -> ex_loc1: (s'=DONE_EXCAVATING) & (tried_xloc1'=true) &  (tried'=tried+1)  & (loc'=xloc1) & (succ_xloc1'=true) 
				  	       + (1-ex_loc1): (tried_xloc1'=true) &  (tried'=tried+1) & (loc'=xloc1);
	[select_xloc1] (succ_xloc1) -> (succ_xloc1'=false) & (s'=DONE_EXCAVATING);
	[try_xloc2] (s=START) & (!tried_xloc2) & (tried<MAX_TRIED) -> ex_loc2: (s'=DONE_EXCAVATING) & (tried_xloc2'=true) &  (tried'=tried+1)  & (loc'=xloc2) & (succ_xloc2'=true) 
				  	       + (1-ex_loc2): (tried_xloc2'=true) &  (tried'=tried+1) & (loc'=xloc2);
	[select_xloc2] (succ_xloc2) -> (succ_xloc2'=false) & (s'=DONE_EXCAVATING);
	[try_xloc3] (s=START) & (!tried_xloc3) & (tried<MAX_TRIED) -> ex_loc3: (s'=DONE_EXCAVATING) & (tried_xloc3'=true) &  (tried'=tried+1)  & (loc'=xloc3) & (succ_xloc3'=true) 
				  	       + (1-ex_loc3): (tried_xloc3'=true) &  (tried'=tried+1) & (loc'=xloc3);
	[select_xloc3] (succ_xloc3) -> (succ_xloc3'=false) & (s'=DONE_EXCAVATING);
	[try_xloc4] (s=START) & (!tried_xloc4) & (tried<MAX_TRIED) -> ex_loc4: (s'=DONE_EXCAVATING) & (tried_xloc4'=true) &  (tried'=tried+1)  & (loc'=xloc4) & (succ_xloc4'=true) 
				  	       + (1-ex_loc4): (tried_xloc4'=true) &  (tried'=tried+1) & (loc'=xloc4);
	[select_xloc4] (succ_xloc4) -> (succ_xloc4'=false) & (s'=DONE_EXCAVATING);
	[try_xloc5] (s=START) & (!tried_xloc5) & (tried<MAX_TRIED) -> ex_loc5: (s'=DONE_EXCAVATING) & (tried_xloc5'=true) &  (tried'=tried+1)  & (loc'=xloc5) & (succ_xloc5'=true) 
				  	       + (1-ex_loc5): (tried_xloc5'=true) &  (tried'=tried+1) & (loc'=xloc5);
	[select_xloc5] (succ_xloc5) -> (succ_xloc5'=false) & (s'=DONE_EXCAVATING);
	[try_xloc6] (s=START) & (!tried_xloc6) & (tried<MAX_TRIED) -> ex_loc6: (s'=DONE_EXCAVATING) & (tried_xloc6'=true) &  (tried'=tried+1)  & (loc'=xloc6) & (succ_xloc6'=true) 
				  	       + (1-ex_loc6): (tried_xloc6'=true) &  (tried'=tried+1) & (loc'=xloc6);
	[select_xloc6] (succ_xloc6) -> (succ_xloc6'=false) & (s'=DONE_EXCAVATING);
	[try_xloc7] (s=START) & (!tried_xloc7) & (tried<MAX_TRIED) -> ex_loc7: (s'=DONE_EXCAVATING) & (tried_xloc7'=true) &  (tried'=tried+1)  & (loc'=xloc7) & (succ_xloc7'=true) 
				  	       + (1-ex_loc7): (tried_xloc7'=true) &  (tried'=tried+1) & (loc'=xloc7);
	[select_xloc7] (succ_xloc7) -> (succ_xloc7'=false) & (s'=DONE_EXCAVATING);

	
	// If all excavation locations have been tried (or maximum number of excavation attempts has been reached) and state is not DONE_EXCAVATING, mission fails
	[] (s=START) & (tried_all_xloc | tried>= MAX_TRIED) -> (s'=FAILED); 

	// Dump behavior
	// These commands just update the state to DONE_DUMPING (no probability of failure), and update arm location

	[select_dloc1] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc1);
	[select_dloc2] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc2);
	[select_dloc3] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc3);
	[select_dloc4] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc4);


endmodule


// stopping condition label for PCTL formula checking
label "done" = (s=DONE_DUMPING);



// Script-generated rewards and constants start here


// Science value reward
// The estimated science value for the different excavation locations has to be provided by a different model
rewards "SV"
	[select_xloc1] true: 0.1785;
	[select_xloc2] true: 0.8322;
	[select_xloc3] true: 0.9002;
	[select_xloc4] true: 0.1276;
	[select_xloc5] true: 0.3279;
	[select_xloc6] true: 0.9222;
	[select_xloc7] true: 0.6761;
endrewards

// Energy consumption cost
// The values for the energy costs have to be provided by a different model
// the reward structure below considers both the cost of excavation and moving to the arm to a location
// the cost of excavation is fixed, but the cost of movement from another location varies, depending on the
// original location of the arm (there is one line of the reward structure per alternative original location
// NOTE: cost of moving the arm A->B and B<-A are the same here, but these costs might be different due to different
// trajectories computed by lower-level control

rewards "EC"
	[select_xloc2] loc=xloc1 :0.6029925372672534;
	[select_xloc3] loc=xloc1 :0.20099751242241776;
	[select_xloc4] loc=xloc1 :0.6539113089708726;
	[select_xloc5] loc=xloc1 :0.7502666192761077;
	[select_xloc6] loc=xloc1 :0.3014962686336266;
	[select_xloc7] loc=xloc1 :0.3780211634287159;
	[select_dloc1] loc=xloc1 :0.5946427498927401;
	[select_dloc2] loc=xloc1 :0.5590169943749473;
	[select_dloc3] loc=xloc1 :1.100409014866745;
	[select_dloc4] loc=xloc1 :0.40199502484483557;
	[select_xloc1] loc=xloc2 :0.6029925372672534;
	[select_xloc3] loc=xloc2 :0.4019950248448356;
	[select_xloc4] loc=xloc2 :0.19999999999999996;
	[select_xloc5] loc=xloc2 :0.23259406699226012;
	[select_xloc6] loc=xloc2 :0.3014962686336267;
	[select_xloc7] loc=xloc2 :0.34481879299133333;
	[select_dloc1] loc=xloc2 :0.42941821107167766;
	[select_dloc2] loc=xloc2 :0.21470910553583883;
	[select_dloc3] loc=xloc2 :0.5008991914547277;
	[select_dloc4] loc=xloc2 :0.20099751242241778;
	[select_xloc1] loc=xloc3 :0.20099751242241776;
	[select_xloc2] loc=xloc3 :0.4019950248448356;
	[select_xloc4] loc=xloc3 :0.46647615158762407;
	[select_xloc5] loc=xloc3 :0.5590169943749475;
	[select_xloc6] loc=xloc3 :0.10049875621120888;
	[select_xloc7] loc=xloc3 :0.2325940669922601;
	[select_dloc1] loc=xloc3 :0.46518813398452025;
	[select_dloc2] loc=xloc3 :0.37802116342871595;
	[select_dloc3] loc=xloc3 :0.9000555538409838;
	[select_dloc4] loc=xloc3 :0.2009975124224178;
	[select_xloc1] loc=xloc4 :0.6539113089708726;
	[select_xloc2] loc=xloc4 :0.19999999999999996;
	[select_xloc3] loc=xloc4 :0.46647615158762407;
	[select_xloc5] loc=xloc4 :0.1004987562112089;
	[select_xloc6] loc=xloc4 :0.378021163428716;
	[select_xloc7] loc=xloc4 :0.3014962686336267;
	[select_dloc1] loc=xloc4 :0.2690724809414741;
	[select_dloc2] loc=xloc4 :0.1004987562112089;
	[select_dloc3] loc=xloc4 :0.5503635162326805;
	[select_dloc4] loc=xloc4 :0.29732137494637007;
	[select_xloc1] loc=xloc5 :0.7502666192761077;
	[select_xloc2] loc=xloc5 :0.23259406699226012;
	[select_xloc3] loc=xloc5 :0.5590169943749475;
	[select_xloc4] loc=xloc5 :0.1004987562112089;
	[select_xloc6] loc=xloc5 :0.46647615158762407;
	[select_xloc7] loc=xloc5 :0.4019950248448356;
	[select_dloc1] loc=xloc5 :0.34481879299133333;
	[select_dloc2] loc=xloc5 :0.2009975124224178;
	[select_dloc3] loc=xloc5 :0.46647615158762407;
	[select_dloc4] loc=xloc5 :0.37802116342871595;
	[select_xloc1] loc=xloc6 :0.3014962686336266;
	[select_xloc2] loc=xloc6 :0.3014962686336267;
	[select_xloc3] loc=xloc6 :0.10049875621120888;
	[select_xloc4] loc=xloc6 :0.378021163428716;
	[select_xloc5] loc=xloc6 :0.46647615158762407;
	[select_xloc7] loc=xloc6 :0.19999999999999996;
	[select_dloc1] loc=xloc6 :0.4220189569201838;
	[select_dloc2] loc=xloc6 :0.2973213749463701;
	[select_dloc3] loc=xloc6 :0.8;
	[select_dloc4] loc=xloc6 :0.10049875621120893;
	[select_xloc1] loc=xloc7 :0.3780211634287159;
	[select_xloc2] loc=xloc7 :0.34481879299133333;
	[select_xloc3] loc=xloc7 :0.2325940669922601;
	[select_xloc4] loc=xloc7 :0.3014962686336267;
	[select_xloc5] loc=xloc7 :0.4019950248448356;
	[select_xloc6] loc=xloc7 :0.19999999999999996;
	[select_dloc1] loc=xloc7 :0.23259406699226012;
	[select_dloc2] loc=xloc7 :0.2009975124224178;
	[select_dloc3] loc=xloc7 :0.8246211251235323;
	[select_dloc4] loc=xloc7 :0.21470910553583886;
endrewards

rewards "T"
	[select_xloc2] loc=xloc1 :12.059850745345068;
	[select_xloc3] loc=xloc1 :4.019950248448355;
	[select_xloc4] loc=xloc1 :13.078226179417452;
	[select_xloc5] loc=xloc1 :15.005332385522154;
	[select_xloc6] loc=xloc1 :6.029925372672532;
	[select_xloc7] loc=xloc1 :7.560423268574318;
	[select_dloc1] loc=xloc1 :11.892854997854803;
	[select_dloc2] loc=xloc1 :11.180339887498947;
	[select_dloc3] loc=xloc1 :22.0081802973349;
	[select_dloc4] loc=xloc1 :8.039900496896712;
	[select_xloc1] loc=xloc2 :12.059850745345068;
	[select_xloc3] loc=xloc2 :8.039900496896713;
	[select_xloc4] loc=xloc2 :3.999999999999999;
	[select_xloc5] loc=xloc2 :4.651881339845202;
	[select_xloc6] loc=xloc2 :6.029925372672534;
	[select_xloc7] loc=xloc2 :6.896375859826667;
	[select_dloc1] loc=xloc2 :8.588364221433553;
	[select_dloc2] loc=xloc2 :4.294182110716776;
	[select_dloc3] loc=xloc2 :10.017983829094554;
	[select_dloc4] loc=xloc2 :4.019950248448356;
	[select_xloc1] loc=xloc3 :4.019950248448355;
	[select_xloc2] loc=xloc3 :8.039900496896713;
	[select_xloc4] loc=xloc3 :9.329523031752482;
	[select_xloc5] loc=xloc3 :11.180339887498949;
	[select_xloc6] loc=xloc3 :2.0099751242241775;
	[select_xloc7] loc=xloc3 :4.651881339845202;
	[select_dloc1] loc=xloc3 :9.303762679690404;
	[select_dloc2] loc=xloc3 :7.5604232685743185;
	[select_dloc3] loc=xloc3 :18.001111076819676;
	[select_dloc4] loc=xloc3 :4.019950248448357;
	[select_xloc1] loc=xloc4 :13.078226179417452;
	[select_xloc2] loc=xloc4 :3.999999999999999;
	[select_xloc3] loc=xloc4 :9.329523031752482;
	[select_xloc5] loc=xloc4 :2.0099751242241783;
	[select_xloc6] loc=xloc4 :7.56042326857432;
	[select_xloc7] loc=xloc4 :6.029925372672534;
	[select_dloc1] loc=xloc4 :5.381449618829483;
	[select_dloc2] loc=xloc4 :2.0099751242241783;
	[select_dloc3] loc=xloc4 :11.00727032465361;
	[select_dloc4] loc=xloc4 :5.9464274989274015;
	[select_xloc1] loc=xloc5 :15.005332385522154;
	[select_xloc2] loc=xloc5 :4.651881339845202;
	[select_xloc3] loc=xloc5 :11.180339887498949;
	[select_xloc4] loc=xloc5 :2.0099751242241783;
	[select_xloc6] loc=xloc5 :9.329523031752482;
	[select_xloc7] loc=xloc5 :8.039900496896713;
	[select_dloc1] loc=xloc5 :6.896375859826667;
	[select_dloc2] loc=xloc5 :4.019950248448357;
	[select_dloc3] loc=xloc5 :9.329523031752482;
	[select_dloc4] loc=xloc5 :7.5604232685743185;
	[select_xloc1] loc=xloc6 :6.029925372672532;
	[select_xloc2] loc=xloc6 :6.029925372672534;
	[select_xloc3] loc=xloc6 :2.0099751242241775;
	[select_xloc4] loc=xloc6 :7.56042326857432;
	[select_xloc5] loc=xloc6 :9.329523031752482;
	[select_xloc7] loc=xloc6 :3.999999999999999;
	[select_dloc1] loc=xloc6 :8.440379138403676;
	[select_dloc2] loc=xloc6 :5.946427498927402;
	[select_dloc3] loc=xloc6 :16.0;
	[select_dloc4] loc=xloc6 :2.009975124224179;
	[select_xloc1] loc=xloc7 :7.560423268574318;
	[select_xloc2] loc=xloc7 :6.896375859826667;
	[select_xloc3] loc=xloc7 :4.651881339845202;
	[select_xloc4] loc=xloc7 :6.029925372672534;
	[select_xloc5] loc=xloc7 :8.039900496896713;
	[select_xloc6] loc=xloc7 :3.999999999999999;
	[select_dloc1] loc=xloc7 :4.651881339845202;
	[select_dloc2] loc=xloc7 :4.019950248448357;
	[select_dloc3] loc=xloc7 :16.492422502470646;
	[select_dloc4] loc=xloc7 :4.294182110716777;
endrewards

// Excavatability probabilities for excavation locations
const double ex_loc1=0.9423;
const double ex_loc2=0.7308;
const double ex_loc3=0.7088;
const double ex_loc4=0.9587;
const double ex_loc5=0.8939;
const double ex_loc6=0.7017;
const double ex_loc7=0.7813;

// Maximum number of excavation attempts (can be 1 by default, number of excavation locations upper bound)
const int MAX_TRIED=1;
