// autonomy-excavate
// RASPBERRY-SI Planning model prototype for Ocean Worlds Autonomy Testbed
// Javier Camara, Univerity of York
// javier.camaramoreno@york.ac.uk

mdp


 // Number of excavation locations
 // Number of dump locations

// Parameters
const curLoc=11; // Current location of arm when planner is called (here we have a hardcoded value, but this will be provided to the planner)

// Special Locations
const locOrig=0;
const locNull=10+100; // Only auxiliary constants to define the range of variable loc

// Excavation Locations
const xloc1=1;
const xloc2=2;
const xloc3=3;
const xloc4=4;
const xloc5=5;
const xloc6=6;

// Dump Locations
const dloc1=7;
const dloc2=8;
const dloc3=9;
const dloc4=10;


// Possible states of the mission (to keep track of progress)
const START=0;
const DONE_EXCAVATING=1;
const DONE_DUMPING=2;
const FAILED=100;

formula tried_all_xloc =  tried_xloc1 &  tried_xloc2 &  tried_xloc3 &  tried_xloc4 &  tried_xloc5 &  tried_xloc6 &  true; // Have we tried all excavation locations?
//const int MAX_TRIED; // Maximum number of excavation attempts (can be 1 by default, number of excavation locations upper bound)

// Module that is in charge of selecting an excavation location
// It tries one location first, and if it does not succeed, it goes to the next one.
// If all locations have been tried and state is still START (unsuccessful excavation), it fails
module autonomy
	s:[START..FAILED] init START; // State of mission
	loc:[locOrig..locNull] init curLoc;
	tried:[0..MAX_TRIED] init 0; // Keeps track of excavation attempts

	
	tried_xloc1: bool init false;
	succ_xloc1: bool init false;
	tried_xloc2: bool init false;
	succ_xloc2: bool init false;
	tried_xloc3: bool init false;
	succ_xloc3: bool init false;
	tried_xloc4: bool init false;
	succ_xloc4: bool init false;
	tried_xloc5: bool init false;
	succ_xloc5: bool init false;
	tried_xloc6: bool init false;
	succ_xloc6: bool init false;

	// Excavation behavior
	// In the following commands, we have:
	// Command 1:
	// * A guard that checks: (1) that we are at the START of the mission
	// 			  (2) that we have not tried to excavate location A
	//			  (3) that the maximum number of excavation attempts has not been reached
	// * An update with probability ex_locA (excavatability of excavation location A) that:
	//			  (1) updates the variable saying that we have tried location A (not needed but left for clarity)
	// 			  (2) updates the variable that keeps track of excavation attempts
	//			  (3) updates the arm location variable to location A
	//            (4) updates the variable for excavation success in the current location to true	
	// * Another update with probability 1-ex_locA that:
	//			  (1) updates the variable saying that we have tried location A
	//			  (2) updates the arm location variable to location A (even if we have not succeeded excavating)
	// 			  (3) updates the variable that keeps track of excavation attempts
	// Command 2:
	// * A guard that checks: (1) that there is success in the current excavation location
	// * An update that: (1) sets the excavation success back to false
   	//			         (2) updates the state to successful excavation (DONE_EXCAVATING)

	
	[try_xloc1] (s=START) & (!tried_xloc1) & (tried<MAX_TRIED) -> ex_loc1: (s'=DONE_EXCAVATING) & (tried_xloc1'=true) &  (tried'=tried+1)  & (loc'=xloc1) & (succ_xloc1'=true) 
				  	       + (1-ex_loc1): (tried_xloc1'=true) &  (tried'=tried+1) & (loc'=xloc1);
	[select_xloc1] (succ_xloc1) -> (succ_xloc1'=false) & (s'=DONE_EXCAVATING);
	[try_xloc2] (s=START) & (!tried_xloc2) & (tried<MAX_TRIED) -> ex_loc2: (s'=DONE_EXCAVATING) & (tried_xloc2'=true) &  (tried'=tried+1)  & (loc'=xloc2) & (succ_xloc2'=true) 
				  	       + (1-ex_loc2): (tried_xloc2'=true) &  (tried'=tried+1) & (loc'=xloc2);
	[select_xloc2] (succ_xloc2) -> (succ_xloc2'=false) & (s'=DONE_EXCAVATING);
	[try_xloc3] (s=START) & (!tried_xloc3) & (tried<MAX_TRIED) -> ex_loc3: (s'=DONE_EXCAVATING) & (tried_xloc3'=true) &  (tried'=tried+1)  & (loc'=xloc3) & (succ_xloc3'=true) 
				  	       + (1-ex_loc3): (tried_xloc3'=true) &  (tried'=tried+1) & (loc'=xloc3);
	[select_xloc3] (succ_xloc3) -> (succ_xloc3'=false) & (s'=DONE_EXCAVATING);
	[try_xloc4] (s=START) & (!tried_xloc4) & (tried<MAX_TRIED) -> ex_loc4: (s'=DONE_EXCAVATING) & (tried_xloc4'=true) &  (tried'=tried+1)  & (loc'=xloc4) & (succ_xloc4'=true) 
				  	       + (1-ex_loc4): (tried_xloc4'=true) &  (tried'=tried+1) & (loc'=xloc4);
	[select_xloc4] (succ_xloc4) -> (succ_xloc4'=false) & (s'=DONE_EXCAVATING);
	[try_xloc5] (s=START) & (!tried_xloc5) & (tried<MAX_TRIED) -> ex_loc5: (s'=DONE_EXCAVATING) & (tried_xloc5'=true) &  (tried'=tried+1)  & (loc'=xloc5) & (succ_xloc5'=true) 
				  	       + (1-ex_loc5): (tried_xloc5'=true) &  (tried'=tried+1) & (loc'=xloc5);
	[select_xloc5] (succ_xloc5) -> (succ_xloc5'=false) & (s'=DONE_EXCAVATING);
	[try_xloc6] (s=START) & (!tried_xloc6) & (tried<MAX_TRIED) -> ex_loc6: (s'=DONE_EXCAVATING) & (tried_xloc6'=true) &  (tried'=tried+1)  & (loc'=xloc6) & (succ_xloc6'=true) 
				  	       + (1-ex_loc6): (tried_xloc6'=true) &  (tried'=tried+1) & (loc'=xloc6);
	[select_xloc6] (succ_xloc6) -> (succ_xloc6'=false) & (s'=DONE_EXCAVATING);

	
	// If all excavation locations have been tried (or maximum number of excavation attempts has been reached) and state is not DONE_EXCAVATING, mission fails
	[] (s=START) & (tried_all_xloc | tried>= MAX_TRIED) -> (s'=FAILED); 

	// Dump behavior
	// These commands just update the state to DONE_DUMPING (no probability of failure), and update arm location

	[select_dloc1] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc1);
	[select_dloc2] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc2);
	[select_dloc3] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc3);
	[select_dloc4] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc4);


endmodule


// stopping condition label for PCTL formula checking
label "done" = (s=DONE_DUMPING);



// Script-generated rewards and constants start here


// Science value reward
// The estimated science value for the different excavation locations has to be provided by a different model
rewards "SV"
	[select_xloc1] true: 0.2834;
	[select_xloc2] true: 0.4734;
	[select_xloc3] true: 0.7385;
	[select_xloc4] true: 0.3651;
	[select_xloc5] true: 0.6575;
	[select_xloc6] true: 0.9549;
endrewards

// Energy consumption cost
// The values for the energy costs have to be provided by a different model
// the reward structure below considers both the cost of excavation and moving to the arm to a location
// the cost of excavation is fixed, but the cost of movement from another location varies, depending on the
// original location of the arm (there is one line of the reward structure per alternative original location
// NOTE: cost of moving the arm A->B and B<-A are the same here, but these costs might be different due to different
// trajectories computed by lower-level control

rewards "EC"
	[select_xloc2] loc=xloc1 :0.46647615158762407;
	[select_xloc3] loc=xloc1 :1.103675676999362;
	[select_xloc4] loc=xloc1 :1.2042009799032718;
	[select_xloc5] loc=xloc1 :0.29732137494637007;
	[select_xloc6] loc=xloc1 :1.900026315607234;
	[select_dloc1] loc=xloc1 :1.813394606807906;
	[select_dloc2] loc=xloc1 :0.5024937810560445;
	[select_dloc3] loc=xloc1 :1.617899873292535;
	[select_dloc4] loc=xloc1 :1.715488268686207;
	[select_xloc1] loc=xloc2 :0.46647615158762407;
	[select_xloc3] loc=xloc2 :0.7158910531638176;
	[select_xloc4] loc=xloc2 :0.7433034373659253;
	[select_xloc5] loc=xloc2 :0.20099751242241787;
	[select_xloc6] loc=xloc2 :1.5175308893067054;
	[select_dloc1] loc=xloc2 :1.4001428498549708;
	[select_dloc2] loc=xloc2 :0.21470910553583883;
	[select_dloc3] loc=xloc2 :1.2;
	[select_dloc4] loc=xloc2 :1.3000384609695206;
	[select_xloc1] loc=xloc3 :1.103675676999362;
	[select_xloc2] loc=xloc3 :0.7158910531638176;
	[select_xloc4] loc=xloc3 :0.3999999999999999;
	[select_xloc5] loc=xloc3 :0.9093404203047393;
	[select_xloc6] loc=xloc3 :0.8039900496896712;
	[select_dloc1] loc=xloc3 :0.7119691004531026;
	[select_dloc2] loc=xloc3 :0.6013318551349163;
	[select_dloc3] loc=xloc3 :0.5220153254455274;
	[select_dloc4] loc=xloc3 :0.6161168720299744;
	[select_xloc1] loc=xloc4 :1.2042009799032718;
	[select_xloc2] loc=xloc4 :0.7433034373659253;
	[select_xloc3] loc=xloc4 :0.3999999999999999;
	[select_xloc5] loc=xloc4 :0.9396275858019495;
	[select_xloc6] loc=xloc4 :0.9329523031752481;
	[select_dloc1] loc=xloc4 :0.7502666192761078;
	[select_dloc2] loc=xloc4 :0.744043009509531;
	[select_dloc3] loc=xloc4 :0.5590169943749475;
	[select_dloc4] loc=xloc4 :0.6539113089708726;
	[select_xloc1] loc=xloc5 :0.29732137494637007;
	[select_xloc2] loc=xloc5 :0.20099751242241787;
	[select_xloc3] loc=xloc5 :0.9093404203047393;
	[select_xloc4] loc=xloc5 :0.9396275858019495;
	[select_xloc6] loc=xloc5 :1.7129214809792073;
	[select_dloc1] loc=xloc5 :1.6;
	[select_dloc2] loc=xloc5 :0.34481879299133333;
	[select_dloc3] loc=xloc5 :1.4001428498549708;
	[select_dloc4] loc=xloc5 :1.5000333329629714;
	[select_xloc1] loc=xloc6 :1.900026315607234;
	[select_xloc2] loc=xloc6 :1.5175308893067054;
	[select_xloc3] loc=xloc6 :0.8039900496896712;
	[select_xloc4] loc=xloc6 :0.9329523031752481;
	[select_xloc5] loc=xloc6 :1.7129214809792073;
	[select_dloc1] loc=xloc6 :0.2325940669922601;
	[select_dloc2] loc=xloc6 :1.4005713120009275;
	[select_dloc3] loc=xloc6 :0.378021163428716;
	[select_dloc4] loc=xloc6 :0.2973213749463701;
endrewards

rewards "T"
	[select_xloc2] loc=xloc1 :9.329523031752482;
	[select_xloc3] loc=xloc1 :22.073513539987243;
	[select_xloc4] loc=xloc1 :24.084019598065435;
	[select_xloc5] loc=xloc1 :5.9464274989274015;
	[select_xloc6] loc=xloc1 :38.00052631214468;
	[select_dloc1] loc=xloc1 :36.267892136158125;
	[select_dloc2] loc=xloc1 :10.04987562112089;
	[select_dloc3] loc=xloc1 :32.3579974658507;
	[select_dloc4] loc=xloc1 :34.30976537372414;
	[select_xloc1] loc=xloc2 :9.329523031752482;
	[select_xloc3] loc=xloc2 :14.317821063276352;
	[select_xloc4] loc=xloc2 :14.866068747318506;
	[select_xloc5] loc=xloc2 :4.019950248448358;
	[select_xloc6] loc=xloc2 :30.35061778613411;
	[select_dloc1] loc=xloc2 :28.002856997099418;
	[select_dloc2] loc=xloc2 :4.294182110716776;
	[select_dloc3] loc=xloc2 :24.0;
	[select_dloc4] loc=xloc2 :26.000769219390413;
	[select_xloc1] loc=xloc3 :22.073513539987243;
	[select_xloc2] loc=xloc3 :14.317821063276352;
	[select_xloc4] loc=xloc3 :7.999999999999998;
	[select_xloc5] loc=xloc3 :18.186808406094784;
	[select_xloc6] loc=xloc3 :16.079800993793427;
	[select_dloc1] loc=xloc3 :14.239382009062052;
	[select_dloc2] loc=xloc3 :12.026637102698325;
	[select_dloc3] loc=xloc3 :10.440306508910549;
	[select_dloc4] loc=xloc3 :12.322337440599489;
	[select_xloc1] loc=xloc4 :24.084019598065435;
	[select_xloc2] loc=xloc4 :14.866068747318506;
	[select_xloc3] loc=xloc4 :7.999999999999998;
	[select_xloc5] loc=xloc4 :18.79255171603899;
	[select_xloc6] loc=xloc4 :18.659046063504963;
	[select_dloc1] loc=xloc4 :15.005332385522156;
	[select_dloc2] loc=xloc4 :14.880860190190619;
	[select_dloc3] loc=xloc4 :11.180339887498949;
	[select_dloc4] loc=xloc4 :13.078226179417452;
	[select_xloc1] loc=xloc5 :5.9464274989274015;
	[select_xloc2] loc=xloc5 :4.019950248448358;
	[select_xloc3] loc=xloc5 :18.186808406094784;
	[select_xloc4] loc=xloc5 :18.79255171603899;
	[select_xloc6] loc=xloc5 :34.25842961958415;
	[select_dloc1] loc=xloc5 :32.0;
	[select_dloc2] loc=xloc5 :6.896375859826667;
	[select_dloc3] loc=xloc5 :28.002856997099418;
	[select_dloc4] loc=xloc5 :30.000666659259426;
	[select_xloc1] loc=xloc6 :38.00052631214468;
	[select_xloc2] loc=xloc6 :30.35061778613411;
	[select_xloc3] loc=xloc6 :16.079800993793427;
	[select_xloc4] loc=xloc6 :18.659046063504963;
	[select_xloc5] loc=xloc6 :34.25842961958415;
	[select_dloc1] loc=xloc6 :4.651881339845202;
	[select_dloc2] loc=xloc6 :28.01142624001855;
	[select_dloc3] loc=xloc6 :7.56042326857432;
	[select_dloc4] loc=xloc6 :5.946427498927402;
endrewards

// Excavatability probabilities for excavation locations
const double ex_loc1=0.8724;
const double ex_loc2=0.7868;
const double ex_loc3=0.6674;
const double ex_loc4=0.8356;
const double ex_loc5=0.7039;
const double ex_loc6=0.5699;

// Maximum number of excavation attempts (can be 1 by default, number of excavation locations upper bound)
const int MAX_TRIED=1;
