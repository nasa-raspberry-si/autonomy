// autonomy-excavate
// RASPBERRY-SI Planning model prototype for Ocean Worlds Autonomy Testbed
// Javier Camara, Univerity of York
// javier.camaramoreno@york.ac.uk

mdp


 // Number of excavation locations
 // Number of dump locations

// Parameters
const curLoc=11; // Current location of arm when planner is called (here we have a hardcoded value, but this will be provided to the planner)

// Special Locations
const locOrig=0;
const locNull=10+100; // Only auxiliary constants to define the range of variable loc

// Excavation Locations
const xloc1=1;
const xloc2=2;
const xloc3=3;
const xloc4=4;
const xloc5=5;
const xloc6=6;

// Dump Locations
const dloc1=7;
const dloc2=8;
const dloc3=9;
const dloc4=10;


// Possible states of the mission (to keep track of progress)
const START=0;
const DONE_EXCAVATING=1;
const DONE_DUMPING=2;
const FAILED=100;

formula tried_all_xloc =  tried_xloc1 &  tried_xloc2 &  tried_xloc3 &  tried_xloc4 &  tried_xloc5 &  tried_xloc6 &  true; // Have we tried all excavation locations?
//const int MAX_TRIED; // Maximum number of excavation attempts (can be 1 by default, number of excavation locations upper bound)

// Module that is in charge of selecting an excavation location
// It tries one location first, and if it does not succeed, it goes to the next one.
// If all locations have been tried and state is still START (unsuccessful excavation), it fails
module autonomy
	s:[START..FAILED] init START; // State of mission
	loc:[locOrig..locNull] init curLoc;
	tried:[0..MAX_TRIED] init 0; // Keeps track of excavation attempts

	
	tried_xloc1: bool init false;
	succ_xloc1: bool init false;
	tried_xloc2: bool init false;
	succ_xloc2: bool init false;
	tried_xloc3: bool init false;
	succ_xloc3: bool init false;
	tried_xloc4: bool init false;
	succ_xloc4: bool init false;
	tried_xloc5: bool init false;
	succ_xloc5: bool init false;
	tried_xloc6: bool init false;
	succ_xloc6: bool init false;

	// Excavation behavior
	// In the following commands, we have:
	// Command 1:
	// * A guard that checks: (1) that we are at the START of the mission
	// 			  (2) that we have not tried to excavate location A
	//			  (3) that the maximum number of excavation attempts has not been reached
	// * An update with probability ex_locA (excavatability of excavation location A) that:
	//			  (1) updates the variable saying that we have tried location A (not needed but left for clarity)
	// 			  (2) updates the variable that keeps track of excavation attempts
	//			  (3) updates the arm location variable to location A
	//            (4) updates the variable for excavation success in the current location to true	
	// * Another update with probability 1-ex_locA that:
	//			  (1) updates the variable saying that we have tried location A
	//			  (2) updates the arm location variable to location A (even if we have not succeeded excavating)
	// 			  (3) updates the variable that keeps track of excavation attempts
	// Command 2:
	// * A guard that checks: (1) that there is success in the current excavation location
	// * An update that: (1) sets the excavation success back to false
   	//			         (2) updates the state to successful excavation (DONE_EXCAVATING)

	
	[try_xloc1] (s=START) & (!tried_xloc1) & (tried<MAX_TRIED) -> ex_loc1: (s'=DONE_EXCAVATING) & (tried_xloc1'=true) &  (tried'=tried+1)  & (loc'=xloc1) & (succ_xloc1'=true) 
				  	       + (1-ex_loc1): (tried_xloc1'=true) &  (tried'=tried+1) & (loc'=xloc1);
	[select_xloc1] (succ_xloc1) -> (succ_xloc1'=false) & (s'=DONE_EXCAVATING);
	[try_xloc2] (s=START) & (!tried_xloc2) & (tried<MAX_TRIED) -> ex_loc2: (s'=DONE_EXCAVATING) & (tried_xloc2'=true) &  (tried'=tried+1)  & (loc'=xloc2) & (succ_xloc2'=true) 
				  	       + (1-ex_loc2): (tried_xloc2'=true) &  (tried'=tried+1) & (loc'=xloc2);
	[select_xloc2] (succ_xloc2) -> (succ_xloc2'=false) & (s'=DONE_EXCAVATING);
	[try_xloc3] (s=START) & (!tried_xloc3) & (tried<MAX_TRIED) -> ex_loc3: (s'=DONE_EXCAVATING) & (tried_xloc3'=true) &  (tried'=tried+1)  & (loc'=xloc3) & (succ_xloc3'=true) 
				  	       + (1-ex_loc3): (tried_xloc3'=true) &  (tried'=tried+1) & (loc'=xloc3);
	[select_xloc3] (succ_xloc3) -> (succ_xloc3'=false) & (s'=DONE_EXCAVATING);
	[try_xloc4] (s=START) & (!tried_xloc4) & (tried<MAX_TRIED) -> ex_loc4: (s'=DONE_EXCAVATING) & (tried_xloc4'=true) &  (tried'=tried+1)  & (loc'=xloc4) & (succ_xloc4'=true) 
				  	       + (1-ex_loc4): (tried_xloc4'=true) &  (tried'=tried+1) & (loc'=xloc4);
	[select_xloc4] (succ_xloc4) -> (succ_xloc4'=false) & (s'=DONE_EXCAVATING);
	[try_xloc5] (s=START) & (!tried_xloc5) & (tried<MAX_TRIED) -> ex_loc5: (s'=DONE_EXCAVATING) & (tried_xloc5'=true) &  (tried'=tried+1)  & (loc'=xloc5) & (succ_xloc5'=true) 
				  	       + (1-ex_loc5): (tried_xloc5'=true) &  (tried'=tried+1) & (loc'=xloc5);
	[select_xloc5] (succ_xloc5) -> (succ_xloc5'=false) & (s'=DONE_EXCAVATING);
	[try_xloc6] (s=START) & (!tried_xloc6) & (tried<MAX_TRIED) -> ex_loc6: (s'=DONE_EXCAVATING) & (tried_xloc6'=true) &  (tried'=tried+1)  & (loc'=xloc6) & (succ_xloc6'=true) 
				  	       + (1-ex_loc6): (tried_xloc6'=true) &  (tried'=tried+1) & (loc'=xloc6);
	[select_xloc6] (succ_xloc6) -> (succ_xloc6'=false) & (s'=DONE_EXCAVATING);

	
	// If all excavation locations have been tried (or maximum number of excavation attempts has been reached) and state is not DONE_EXCAVATING, mission fails
	[] (s=START) & (tried_all_xloc | tried>= MAX_TRIED) -> (s'=FAILED); 

	// Dump behavior
	// These commands just update the state to DONE_DUMPING (no probability of failure), and update arm location

	[select_dloc1] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc1);
	[select_dloc2] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc2);
	[select_dloc3] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc3);
	[select_dloc4] (s=DONE_EXCAVATING) -> (s'=DONE_DUMPING) & (loc'=dloc4);


endmodule


// stopping condition label for PCTL formula checking
label "done" = (s=DONE_DUMPING);



// Script-generated rewards and constants start here


// Science value reward
// The estimated science value for the different excavation locations has to be provided by a different model
rewards "SV"
	[select_xloc3] true: 0.4889;
	[select_xloc2] true: 0.2177;
	[select_xloc1] true: 0.8583;
	[select_xloc6] true: 0.8722;
	[select_xloc5] true: 0.5588;
	[select_xloc4] true: 0.2191;
endrewards

// Energy consumption cost
// The values for the energy costs have to be provided by a different model
// the reward structure below considers both the cost of excavation and moving to the arm to a location
// the cost of excavation is fixed, but the cost of movement from another location varies, depending on the
// original location of the arm (there is one line of the reward structure per alternative original location
// NOTE: cost of moving the arm A->B and B<-A are the same here, but these costs might be different due to different
// trajectories computed by lower-level control

rewards "EC"
	[select_xloc2] loc=xloc3 :0.750266619276;
	[select_xloc1] loc=xloc3 :0.932952303175;
	[select_xloc6] loc=xloc3 :0.4472135955;
	[select_xloc5] loc=xloc3 :0.559016994375;
	[select_xloc4] loc=xloc3 :0.939627585802;
	[select_dloc4] loc=xloc3 :0.500899191455;
	[select_dloc3] loc=xloc3 :0.2;
	[select_dloc2] loc=xloc3 :0.232594066992;
	[select_dloc1] loc=xloc3 :0.301496268634;
	[select_xloc3] loc=xloc2 :0.750266619276;
	[select_xloc1] loc=xloc2 :0.232594066992;
	[select_xloc6] loc=xloc2 :0.909340420305;
	[select_xloc5] loc=xloc2 :0.200997512422;
	[select_xloc4] loc=xloc2 :1.6;
	[select_dloc4] loc=xloc2 :1.22376468326;
	[select_dloc3] loc=xloc2 :0.939627585802;
	[select_dloc2] loc=xloc2 :0.932952303175;
	[select_dloc1] loc=xloc2 :0.466476151588;
	[select_xloc3] loc=xloc1 :0.932952303175;
	[select_xloc2] loc=xloc1 :0.232594066992;
	[select_xloc6] loc=xloc1 :1.00319489632;
	[select_xloc5] loc=xloc1 :0.378021163429;
	[select_xloc4] loc=xloc1 :1.71292148098;
	[select_dloc4] loc=xloc1 :1.37568164922;
	[select_dloc3] loc=xloc1 :1.10923396991;
	[select_dloc2] loc=xloc1 :1.13406349029;
	[select_dloc1] loc=xloc1 :0.672681202354;
	[select_xloc3] loc=xloc6 :0.4472135955;
	[select_xloc2] loc=xloc6 :0.909340420305;
	[select_xloc1] loc=xloc6 :1.00319489632;
	[select_xloc5] loc=xloc6 :0.715891053164;
	[select_xloc4] loc=xloc6 :0.711969100453;
	[select_dloc4] loc=xloc6 :0.476340214553;
	[select_dloc3] loc=xloc6 :0.4;
	[select_dloc2] loc=xloc6 :0.618142378421;
	[select_dloc1] loc=xloc6 :0.622012861603;
	[select_xloc3] loc=xloc5 :0.559016994375;
	[select_xloc2] loc=xloc5 :0.200997512422;
	[select_xloc1] loc=xloc5 :0.378021163429;
	[select_xloc6] loc=xloc5 :0.715891053164;
	[select_xloc4] loc=xloc5 :1.40014284985;
	[select_dloc4] loc=xloc5 :1.02391405889;
	[select_dloc3] loc=xloc5 :0.743303437366;
	[select_dloc2] loc=xloc5 :0.756042326857;
	[select_dloc1] loc=xloc5 :0.297321374946;
	[select_xloc3] loc=xloc4 :0.939627585802;
	[select_xloc2] loc=xloc4 :1.6;
	[select_xloc1] loc=xloc4 :1.71292148098;
	[select_xloc6] loc=xloc4 :0.711969100453;
	[select_xloc5] loc=xloc4 :1.40014284985;
	[select_dloc4] loc=xloc4 :0.466476151588;
	[select_dloc3] loc=xloc4 :0.750266619276;
	[select_dloc2] loc=xloc4 :0.932952303175;
	[select_dloc1] loc=xloc4 :1.22376468326;
endrewards

rewards "T"
	[select_xloc2] loc=xloc3 :15.0053323855;
	[select_xloc1] loc=xloc3 :18.6590460635;
	[select_xloc6] loc=xloc3 :8.94427191;
	[select_xloc5] loc=xloc3 :11.1803398875;
	[select_xloc4] loc=xloc3 :18.792551716;
	[select_dloc4] loc=xloc3 :10.0179838291;
	[select_dloc3] loc=xloc3 :4.0;
	[select_dloc2] loc=xloc3 :4.65188133985;
	[select_dloc1] loc=xloc3 :6.02992537267;
	[select_xloc3] loc=xloc2 :15.0053323855;
	[select_xloc1] loc=xloc2 :4.65188133985;
	[select_xloc6] loc=xloc2 :18.1868084061;
	[select_xloc5] loc=xloc2 :4.01995024845;
	[select_xloc4] loc=xloc2 :32.0;
	[select_dloc4] loc=xloc2 :24.4752936652;
	[select_dloc3] loc=xloc2 :18.792551716;
	[select_dloc2] loc=xloc2 :18.6590460635;
	[select_dloc1] loc=xloc2 :9.32952303175;
	[select_xloc3] loc=xloc1 :18.6590460635;
	[select_xloc2] loc=xloc1 :4.65188133985;
	[select_xloc6] loc=xloc1 :20.0638979264;
	[select_xloc5] loc=xloc1 :7.56042326857;
	[select_xloc4] loc=xloc1 :34.2584296196;
	[select_dloc4] loc=xloc1 :27.5136329844;
	[select_dloc3] loc=xloc1 :22.1846793982;
	[select_dloc2] loc=xloc1 :22.6812698057;
	[select_dloc1] loc=xloc1 :13.4536240471;
	[select_xloc3] loc=xloc6 :8.94427191;
	[select_xloc2] loc=xloc6 :18.1868084061;
	[select_xloc1] loc=xloc6 :20.0638979264;
	[select_xloc5] loc=xloc6 :14.3178210633;
	[select_xloc4] loc=xloc6 :14.2393820091;
	[select_dloc4] loc=xloc6 :9.52680429105;
	[select_dloc3] loc=xloc6 :8.0;
	[select_dloc2] loc=xloc6 :12.3628475684;
	[select_dloc1] loc=xloc6 :12.4402572321;
	[select_xloc3] loc=xloc5 :11.1803398875;
	[select_xloc2] loc=xloc5 :4.01995024845;
	[select_xloc1] loc=xloc5 :7.56042326857;
	[select_xloc6] loc=xloc5 :14.3178210633;
	[select_xloc4] loc=xloc5 :28.0028569971;
	[select_dloc4] loc=xloc5 :20.4782811779;
	[select_dloc3] loc=xloc5 :14.8660687473;
	[select_dloc2] loc=xloc5 :15.1208465371;
	[select_dloc1] loc=xloc5 :5.94642749893;
	[select_xloc3] loc=xloc4 :18.792551716;
	[select_xloc2] loc=xloc4 :32.0;
	[select_xloc1] loc=xloc4 :34.2584296196;
	[select_xloc6] loc=xloc4 :14.2393820091;
	[select_xloc5] loc=xloc4 :28.0028569971;
	[select_dloc4] loc=xloc4 :9.32952303175;
	[select_dloc3] loc=xloc4 :15.0053323855;
	[select_dloc2] loc=xloc4 :18.6590460635;
	[select_dloc1] loc=xloc4 :24.4752936652;
endrewards

// Excavatability probabilities for excavation locations
const double ex_loc3=0.8014;
const double ex_loc2=0.9116;
const double ex_loc1=0.6514;
const double ex_loc6=0.6457;
const double ex_loc5=0.773;
const double ex_loc4=0.911;

// Maximum number of excavation attempts (can be 1 by default, number of excavation locations upper bound)
const int MAX_TRIED=1;
